"use client"

import { useEffect, useState } from 'react'
import { useParams } from 'next/navigation'
import ClientChatContainer from '@/components/dashboard/ClientChatContainer'
import { Agent, Organization } from '@/components/dashboard/types'
import { supabase } from '@/lib/supabase/client'

// Helper function to update organization name from business info
async function updateOrganizationNameFromBusinessInfo(organizationId: string): Promise<void> {
  try {
    // Get current organization
    const { data: organization, error: orgError } = await supabase
      .from('organizations')
      .select('name')
      .eq('id', organizationId)
      .single()

    if (orgError || !organization) {
      console.log('‚ùå Could not fetch organization for name update')
      return
    }

    // Check if organization name looks auto-generated
    const isAutoGenerated = organization.name.includes('Organization') || 
                            organization.name.includes('\'s Organization') ||
                            organization.name.includes('Company') ||
                            organization.name.length < 3

    if (!isAutoGenerated) {
      console.log('‚úÖ Organization name already looks good:', organization.name)
      return
    }

    // Get business name from business info fields
    const { data: businessNameField, error: fieldError } = await supabase
      .from('business_info_fields')
      .select('field_value')
      .eq('organization_id', organizationId)
      .eq('field_name', 'business_name')
      .eq('is_answered', true)
      .single()

    if (fieldError || !businessNameField?.field_value) {
      console.log('üìù No business name found in onboarding data')
      return
    }

    const businessName = businessNameField.field_value.trim()
    if (businessName.length === 0) {
      console.log('üìù Business name is empty')
      return
    }

    // Update organization name
    const { error: updateError } = await supabase
      .from('organizations')
      .update({
        name: businessName,
        updated_at: new Date().toISOString()
      })
      .eq('id', organizationId)

    if (updateError) {
      console.error('‚ùå Failed to update organization name:', updateError)
    } else {
      console.log('‚úÖ Updated organization name from business info:', businessName)
    }
  } catch (error) {
    console.error('‚ùå Error updating organization name from business info:', error)
  }
}

export default function ClientChatBusinessPage() {
  const params = useParams()
  const businessSlug = params.businessSlug as string
  const locale = params.locale as string
  const [agent, setAgent] = useState<Agent | null>(null)
  const [organization, setOrganization] = useState<Organization | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchBusinessAgent = async () => {
      try {
        if (!businessSlug) {
          setError('No business slug provided')
          setLoading(false)
          return
        }
        // Fetch organization by slug
        const { data: orgData, error: orgError } = await supabase
          .from('organizations')
          .select('*')
          .eq('slug', businessSlug)
          .single()
        if (orgError || !orgData) {
          setError('Business not found')
          setLoading(false)
          return
        }
        setOrganization(orgData)
        
        // Try to fetch existing client chat agent for this organization
        const { data: agentData, error: agentError } = await supabase
          .from('agents')
          .select('*')
          .eq('organization_id', orgData.id)
          .eq('channel', 'client_chat')
          .maybeSingle() // Use maybeSingle instead of single to allow 0 or 1 results
        
        let agent = agentData
        
        // If no client chat agent exists, create a default one for this organization
        if (!agent) {
          console.log('No client chat agent found for organization, creating default agent...')
          
          // First, try to update organization name from business info if needed
          await updateOrganizationNameFromBusinessInfo(orgData.id)
          
          // Refresh organization data to get updated name
          const { data: updatedOrgData } = await supabase
            .from('organizations')
            .select('*')
            .eq('slug', businessSlug)
            .single()
          
          const finalOrgData = updatedOrgData || orgData
          
          const { data: newAgent, error: createError } = await supabase
            .from('agents')
            .insert({
              organization_id: finalOrgData.id,
              user_id: finalOrgData.owner_id,
              name: `${finalOrgData.name} Assistant`,
              greeting: `Hello! I'm the AI assistant for ${finalOrgData.name}. How can I help you today?`,
              tone: 'professional',
              goals: ['Provide helpful customer service', 'Answer questions about our business'],
              system_prompt: `You are the AI assistant for ${finalOrgData.name}. Be helpful, professional, and focus on assisting customers.`,
              paused: false,
              channel: 'client_chat',
              channel_config: {}
            })
            .select()
            .single()
          
          if (createError) {
            console.error('Failed to create default client chat agent:', createError)
            setError('Failed to set up chat for this business')
            setLoading(false)
            return
          }
          
          agent = newAgent
          setOrganization(finalOrgData) // Update organization state with latest name
          console.log('Default client chat agent created successfully:', agent)
        }
        
        setAgent(agent)
        setLoading(false)
      } catch (err) {
        setError('Failed to load chat')
        setLoading(false)
      }
    }
    fetchBusinessAgent()
  }, [businessSlug, supabase])

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading chat...</p>
        </div>
      </div>
    )
  }
  if (error || !agent || !organization) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-pink-100 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">‚ùå</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Chat Not Available</h1>
          <p className="text-gray-600 mb-4">{error || 'This chat link is not valid'}</p>
          <p className="text-sm text-gray-500">Please contact the business for a valid chat link</p>
        </div>
      </div>
    )
  }
  return (
    <div className="h-full bg-white flex flex-col">
      {/* Mobile Header - Compact */}
      <div className="bg-white border-b border-gray-200 px-4 py-3 flex-shrink-0">
        <div className="flex items-center gap-3">
          <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center">
            <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="flex-1 min-w-0">
            <h1 className="text-lg font-semibold text-gray-900 truncate">
              {organization.name}
            </h1>
            <p className="text-sm text-green-600">En l√≠nea</p>
          </div>
        </div>
      </div>

      {/* Chat Container - Full Screen */}
      <div className="flex-1 flex flex-col min-h-0">
        <ClientChatContainer 
          agent={agent}
          organization={organization}
          locale={locale}
          className="flex-1"
        />
      </div>
    </div>
  )
} 